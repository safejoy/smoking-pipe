package com.joy.marijuanaPipes;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.inventory.ItemFlag;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.ShapedRecipe;
import org.bukkit.inventory.meta.Damageable;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.persistence.PersistentDataType;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;

import net.md_5.bungee.api.ChatColor;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Main extends JavaPlugin
{
	private static NamespacedKey key;
	private static Map<Material, List<PotionEffect>> smokables;
	private static int refillAmount;

	@Override
	public void onEnable()
	{
		// Namespace
		key = new NamespacedKey(this, "marijuana_pipes");

		// Config stuff
		saveDefaultConfig();
		loadSmokables();

		// Register command
		this.getCommand("pipes").setExecutor(new ReloadCommand());

		// Listener
		getServer().getPluginManager().registerEvents(new SmokeListener(), this);
		getServer().getPluginManager().registerEvents(new NoModifyListener(), this);

		// Marijuana pipes
		ItemStack item = new ItemStack(Material.WOODEN_HOE);
		ItemMeta meta = item.getItemMeta();
		meta.setDisplayName(ChatColor.RESET + "Marijuana Pipe");
		meta.addItemFlags(ItemFlag.HIDE_ATTRIBUTES);
		meta.getPersistentDataContainer().set(key, PersistentDataType.INTEGER, 1);
		meta.setCustomModelData(getConfig().getInt("customModelData"));
		Damageable dmg = (Damageable) meta;
		dmg.setDamage(58); // Should start empty
		item.setItemMeta(meta);

		ShapedRecipe recipe = new ShapedRecipe(key, item);
		recipe.shape(" S", "B ");
		recipe.setIngredient('S', Material.STICK);
		recipe.setIngredient('B', Material.BOWL);
		Bukkit.addRecipe(recipe);
	}

	@Override
	public void onDisable()
	{

	}

	public static NamespacedKey getKey()
	{
		return key;
	}

	public static Map<Material, List<PotionEffect>> getSmokables()
	{
		return smokables;
	}

	public static int getRefillAmount()
	{
		return refillAmount;
	}

	public void reload()
	{
		reloadConfig();
		loadSmokables();
	}

	private void loadSmokables()
	{
		smokables = new HashMap<>();
		refillAmount = getConfig().getInt("refillAmount", 15);
		
		ConfigurationSection smokablesSection = getConfig().getConfigurationSection("smokables");
		if (smokablesSection != null)
		{
			for (String materialName : smokablesSection.getKeys(false))
			{
				try
				{
					Material material = Material.valueOf(materialName);
					List<PotionEffect> effects = new ArrayList<>();
					
					List<String> effectStrings = smokablesSection.getStringList(materialName);
					for (String effectString : effectStrings)
					{
						String[] parts = effectString.split(":");
						if (parts.length >= 3)
						{
							PotionEffectType effectType = PotionEffectType.getByName(parts[0]);
							if (effectType != null)
							{
								int duration = Integer.parseInt(parts[1]);
								int amplifier = Integer.parseInt(parts[2]);
								effects.add(new PotionEffect(effectType, duration, amplifier));
							}
						}
					}
					
					smokables.put(material, effects);
				}
				catch (IllegalArgumentException e)
				{
					getLogger().warning("Invalid material in config: " + materialName);
				}
			}
		}
	}
}
